_import('<Leaf>');

// noinspection JSAnnotator
return class Main {
	constructor() {
		this.initialize().catch(error => {
			throw error;
		});
	}

	async initialize() {
		LFApp.menuItems = [
			new LFMenuItem({ menu:
				new LFMenu({ items: [
					new LFMenuItem({ title: await CFLocalizedString('About')+' '+LFApp.title, action: () => LFApp.about() }),
					new LFMenuItem().separator(),
					new LFMenuItem({ title: await CFLocalizedString('Services') }),
					new LFMenuItem().separator(),
					new LFMenuItem({ title: await CFLocalizedString('Hide')+' '+LFApp.title }),
					new LFMenuItem({ title: await CFLocalizedString('Hide others') }),
					new LFMenuItem({ title: await CFLocalizedString('Show all') }),
					new LFMenuItem().separator(),
					new LFMenuItem({ title: await CFLocalizedString('Quit')+' '+LFApp.title, action: () => LFApp.quit() })
				] })
			}),
			new LFMenuItem({ title: await CFLocalizedString('File'), menu:
				new LFMenu({ items: [
					new LFMenuItem({ title: await CFLocalizedString('Switch'), action: () => this.switch() }),
					new LFMenuItem({ title: await CFLocalizedString('Quit'), action: () => this.quit() })
				] })
			}),
			new LFMenuItem({ title: await CFLocalizedString('Edit') }),
			new LFMenuItem({ title: await CFLocalizedString('View'), menu:
				new LFMenu({ items: [
					new LFMenuItem({ title: await CFLocalizedString('Update'), action: () => this.update() })
				] })
			}),
			new LFMenuItem({ title: await CFLocalizedString('Window') }),
			new LFMenuItem({ title: await CFLocalizedString('Help') })
		]
		LFApp.quitableBySingleWindow = true;

		new LFWindow({ width: 512, height: 256, title: LFApp.title,
			toolbar: new LFToolbar({ subviews: [
				new LFButton({ title: '', image: await LFImage.new({ shared: 'TemplateQuit' }), action: () => this.quit() }),
				new LFButton({ title: '', image: await LFImage.new({ shared: 'TemplateInfo' }), action: () => this.information() })
			] }),
			view: new LFView({ tight: true, yAlign: 'stretch', subviews: [
				new LFTable()
			] })
		}).center();

		this.table = LFApp.windows[0].view.subviews[0]
		this.update();
		CFEvent.addHandler('processListChanged', () => this.update());
		CFArrayOld.addObserver(LFWorkspace.shared.launchedApplications, () => this.update());
	}

	update() {
		let update = []

		for(let v of _call('list')) {
			let process = _call('info', v),
				application = LFWorkspace.shared.launchedApplications.find(v_ => v_.processIdentifier === process.ID),
				title = application?.title ?? process.path.split('/').pop();

			update.push(new LFTableRow({ title: title, data: { title: title, process: process, application: application }, action: () => application?.focus() }));
		}

		this.table.subviews = update;
	}

	quit() {
		let activeRow = this.table.activeRow;

		if(!activeRow) {
			return;
		}
		if(activeRow.data.application) {
			activeRow.data.application.quit();

			return;
		}

		_call('kill', activeRow.data.process.ID);
	}

	switch() {
		this.table.activeRow?.data.application?.focus();
	}

	async information() {
		let title = this.table.activeRow?.data.title,
			process = this.table.activeRow?.data.process,
			application = this.table.activeRow?.data.application;

		let window = LFApp.windows.find(v => v.tag === process.ID);

		if(!window) {
			new LFWindow({ tag: process.ID, width: 384, type: ['titled', 'closable', 'minimizable'], title: title, view:
				new LFView({ type: 'vertical', subviews: [
					new LFView({ subviews: [
						new LFView({ type: 'vertical', tight: true, subviews: [
							new LFText({ string: 'Process', size: 'small', weight: 'bold' }),
							new LFText({ string: 'Terminal', size: 'small', weight: 'bold' }),
							new LFText({ string: 'User', size: 'small', weight: 'bold' }),
							...application?.bundleURL ? [new LFText({ string: 'Bundle', size: 'small', weight: 'bold' })] : [],
							...application?.identifier ? [new LFText({ string: 'Identifier', size: 'small', weight: 'bold' })] : []
						] }),
						new LFView({ type: 'vertical', tight: true, subviews: [
							new LFText({ string: process.path.split('/').pop()+' ('+process.ID+')', size: 'small' }),
							new LFText({ string: process.terminalID, size: 'small' }),
							new LFText({ string: process.user, size: 'small' }),
							...application?.bundleURL ? [new LFText({ string: application.bundleURL, size: 'small' })] : [],
							...application?.identifier ? [new LFText({ string: application.identifier, size: 'small' })] : []
						] })
					] }),
					new LFButton({ title: await CFLocalizedString('Quit'), action: function() {
						this.get('Superview', LFWindow).close();
						if(application) {
							application.quit();
						} else {
							_call('kill', process.ID);
						}
					} })
				] })
			});
		} else {
			window.focus();
		}
	}
}