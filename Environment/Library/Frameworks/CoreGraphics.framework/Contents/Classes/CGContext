// noinspection JSAnnotator
return class CGContext {
	__layer;
	__internalLayer;

	constructor(layer) {
		if(!Object.isKindOf(layer, CGLayer)) {
			throw new TypeError();
		}

		this.__layer = layer;
		this.__internalLayer = layer.__internalLayer;
	}

	[Symbol.call](self, key, ...arguments_) {
		let value = self[key](...arguments_);

		this.__layer.needsRedraw = true;

		return value;
	}

	drawRectangle(color, x, y, width, height) {
		_call('drDraw', this.__internalLayer, 'rectangle', color, x, y, width, height);
	}

	drawGradient(colors, x, y, width, height, fromX, fromY, toX, toY) {
		_call('drDraw', this.__internalLayer, 'gradient', colors, x, y, width, height, fromX, fromY, toX, toY);
	}

	drawLayer(layer, x, y, width, height) {
		_call('drDraw', this.__internalLayer, 'layer', layer.__internalLayer, x ?? layer.x, y ?? layer.y, width, height);
	}

	clip(x, y, width, height) {
		_call('drClip', this.__internalLayer, x, y, width, height);
	}

	blur(amount, sharp, apply, layer, x, y, ...arguments_) {
		_call('drBlur', this.__internalLayer, amount, sharp, apply, layer.__internalLayer, x ?? layer.x, y ?? layer.y, ...arguments_);
	}

	move(type, x, y, width, height, layer, x_, y_) {
		_call('drMove', this.__internalLayer, type, x, y, width, height, layer.__internalLayer, x_, y_);
	}

	mask(layer, apply, x, y, ...arguments_) {
		_call('drMask', this.__internalLayer, layer.__internalLayer, apply, x ?? layer.x, y ?? layer.y, ...arguments_);
	}

	clear(x, y, width, height) {
		_call('drClear', this.__internalLayer, x, y, width, height);
	}

	iterate(function_) {
		_call('drIterate', this.__internalLayer, function_);
	}
}