// noinspection JSAnnotator
return class Main {
	process = _call('info');
	hostTitle = 'poppy';
	home = '/Users/'+this.process.user;

	constructor() {
		this.initialize().catch((error) => {
			console.log(error);
			_call('kill');
		});
	}

	async initialize() {
		_environment.$pwd = this.home;

		return this.listen();
	}

	async listen() {
		return new Promise((resolve) => {
			let info = `${ this.process.user }@${ this.hostTitle }:${ $pwd.replace(new RegExp('^'+this.home), '~') }${ this.process.user !== 'root' ? '$' : '#' } `,
				input = '',
				displayCaret = true,
				updateString = () => {
					console.log(`${ info }${ input }${ displayCaret ? 'â–ˆ' : '' }`);
				},
				catcher = _call('catcherCreate', 'keyboardChanged', (a) => {
					if(a.event === 'keydown') {
						if(a.value.key === 'Enter') {
							_call('catcherDestroy', catcher);
							resolve(this.execute(...input.split(' '))); return;
						}
						if(a.value.key === 'Backspace' && input.length > 0) {
							input = input.substring(0, input.length-1);
							updateString();
						}
						if(a.value.key.length === 1) {
							input = input+a.value.key;
							updateString();
						}
					}
				});

			updateString();
		});
	}

	async execute(...arguments_) {
		return new Promise((resolve) => {
			if(arguments_.length === 0) {
				return resolve(this.listen());
			}
			if(arguments_[0] === 'exit') {
				return resolve(_call('kill'));
			}

			arguments_[0] = '/bin/'+arguments_[0]

			_call('exec', undefined, undefined, ...arguments_).then(value => {
				if(!value) {
					return resolve(this.listen());
				}
				let catcher = _call('catcherCreate', 'processListChanged', (a) => {
					if(a.event === 'removed' && a.value === value.ID) {
						_call('catcherDestroy', catcher);
						resolve(this.listen());
					}
				});
			}, (error) => {
				console.log(error);
				resolve(this.listen());
			});
		});
	}
}